// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using domain;

namespace api.Migrations
{
    [DbContext(typeof(RemixGoContext))]
    [Migration("20200420182745_RemixGo001")]
    partial class RemixGo001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("domain.Entities.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BonusDescription");

                    b.Property<int>("BonusValue");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("PenaltyDescrition");

                    b.Property<int>("PenaltyValue");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("domain.Entities.Capabilitie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("TestValue");

                    b.Property<int>("TestValueEfficiencyLimit");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Capabilities");
                });

            modelBuilder.Entity("domain.Entities.Disadvantage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("TestValue");

                    b.Property<int>("TestValueEfficiencyLimit");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Disadvantages");
                });

            modelBuilder.Entity("domain.Entities.EnhancedMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("TestValue");

                    b.Property<int>("TestValueEfficiencyLimit");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("EnhancedMoves");
                });

            modelBuilder.Entity("domain.Entities.GenericAdvantage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("TestValue");

                    b.Property<int>("TestValueEfficiencyLimit");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("GenericAdvantage");
                });

            modelBuilder.Entity("domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("DifficultyDescription");

                    b.Property<int>("DifficultyValue");

                    b.Property<string>("EffectDescription");

                    b.Property<int>("EffectValue");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("domain.Entities.MS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Annotations");

                    b.Property<string>("Archetype");

                    b.Property<string>("CharacterName");

                    b.Property<string>("Description");

                    b.Property<int>("Experience");

                    b.Property<string>("ExperienceLabel");

                    b.Property<string>("GenericAdvantagesLabel");

                    b.Property<int>("GenericTestDiceFaceQuantity");

                    b.Property<string>("GenericTestDiceLabel");

                    b.Property<int>("GenericTestDiceQuantity");

                    b.Property<int>("HealthPoints");

                    b.Property<int>("Level");

                    b.Property<string>("LevelLabel");

                    b.Property<int>("MentalTestDiceFaceQuantity");

                    b.Property<int>("MentalTestDiceQuantity");

                    b.Property<int>("PhysicalTestDiceFaceQuantity");

                    b.Property<int>("PhysicalTestDiceQuantity");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("WeightCapacity");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MSs");
                });

            modelBuilder.Entity("domain.Entities.PlayerTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("TableId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerTables");
                });

            modelBuilder.Entity("domain.Entities.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Practices");
                });

            modelBuilder.Entity("domain.Entities.PropertyAndRiche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PropertyAndRiches");
                });

            modelBuilder.Entity("domain.Entities.RMX", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Adrenaline");

                    b.Property<int>("AdrenalineEfficiencyLimit");

                    b.Property<int>("Age");

                    b.Property<string>("Annotations");

                    b.Property<int>("Attack");

                    b.Property<int>("AttackEfficiencyLimit");

                    b.Property<string>("CharacterName");

                    b.Property<string>("Class");

                    b.Property<int>("Defense");

                    b.Property<int>("DefenseEfficiencyLimit");

                    b.Property<int>("Dexterity");

                    b.Property<int>("DexterityEfficiencyLimit");

                    b.Property<int>("ExperienceLevel");

                    b.Property<int>("ExperiencePoints");

                    b.Property<int>("Intelligence");

                    b.Property<int>("IntelligenceEfficiencyLimit");

                    b.Property<int>("Level");

                    b.Property<int>("PlayerId");

                    b.Property<string>("Race");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("Resistance");

                    b.Property<int>("ResistanceEfficiencyLimit");

                    b.Property<int>("Sapience");

                    b.Property<int>("SapienceEfficiencyLimit");

                    b.Property<int>("Strength");

                    b.Property<int>("StrengthEfficiencyLimit");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("Velocity");

                    b.Property<int>("VelocityEfficiencyLimit");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("RMXs");
                });

            modelBuilder.Entity("domain.Entities.SheetArmor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArmorId");

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetArmors");
                });

            modelBuilder.Entity("domain.Entities.SheetCapabilitie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CapabilitieId");

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CapabilitieId");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetCapabilities");
                });

            modelBuilder.Entity("domain.Entities.SheetDisadvantage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DisadvantageId");

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("DisadvantageId");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetDisadvantages");
                });

            modelBuilder.Entity("domain.Entities.SheetEnhancedMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EnhancedMoveId");

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("EnhancedMoveId");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetEnhancedMoves");
                });

            modelBuilder.Entity("domain.Entities.SheetGenericAdvantage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GenericAdvantageId");

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("GenericAdvantageId");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetGenericAdvantage");
                });

            modelBuilder.Entity("domain.Entities.SheetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemId");

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetItems");
                });

            modelBuilder.Entity("domain.Entities.SheetPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MSId");

                    b.Property<int>("PracticeId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MSId");

                    b.HasIndex("PracticeId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetPractices");
                });

            modelBuilder.Entity("domain.Entities.SheetPropertyAndRiche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MSId");

                    b.Property<int>("PropertyAndRicheId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MSId");

                    b.HasIndex("PropertyAndRicheId");

                    b.HasIndex("RMXId");

                    b.ToTable("SheetPropertyAndRiches");
                });

            modelBuilder.Entity("domain.Entities.SheetSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("SkillId");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.HasIndex("SkillId");

                    b.ToTable("SheetSkills");
                });

            modelBuilder.Entity("domain.Entities.SheetWeapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MSId");

                    b.Property<int?>("RMXId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("WeaponId");

                    b.HasKey("Id");

                    b.HasIndex("MSId");

                    b.HasIndex("RMXId");

                    b.HasIndex("WeaponId");

                    b.ToTable("SheetWeapons");
                });

            modelBuilder.Entity("domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("TestValue");

                    b.Property<int>("TestValueEfficiencyLimit");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("domain.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("MasterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Fullname");

                    b.Property<string>("Password");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "oluizdequeiroz@gmail.com",
                            Fullname = "Luiz de Queiroz",
                            Password = "8BC00E795870011174F8138ED09DF91B2822F5A6D19DC48B5C06E63598BCFD1D997C3A95736EE965C36A42F5D0F8A7E0A4CA29F9CBD1A4E4559940E64658CE0A",
                            RegisterDate = new DateTime(2020, 4, 20, 15, 27, 44, 888, DateTimeKind.Local).AddTicks(4215),
                            Username = "luizdequeiroz"
                        });
                });

            modelBuilder.Entity("domain.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Damage");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("domain.Entities.MS", b =>
                {
                    b.HasOne("domain.Entities.User", "Player")
                        .WithMany("MSs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("domain.Entities.PlayerTable", b =>
                {
                    b.HasOne("domain.Entities.Table", "Table")
                        .WithMany("PlayerTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.User", "Player")
                        .WithMany("PlayerTables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("domain.Entities.RMX", b =>
                {
                    b.HasOne("domain.Entities.User", "Player")
                        .WithMany("RMXs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("domain.Entities.SheetArmor", b =>
                {
                    b.HasOne("domain.Entities.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("Armors")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Armors")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetCapabilitie", b =>
                {
                    b.HasOne("domain.Entities.Capabilitie", "Capabilitie")
                        .WithMany()
                        .HasForeignKey("CapabilitieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("PhysicalCapabilities")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Capabilities")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetDisadvantage", b =>
                {
                    b.HasOne("domain.Entities.Disadvantage", "Disadvantage")
                        .WithMany()
                        .HasForeignKey("DisadvantageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("Disadvantages")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Disadvantages")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetEnhancedMove", b =>
                {
                    b.HasOne("domain.Entities.EnhancedMove", "EnhancedMove")
                        .WithMany()
                        .HasForeignKey("EnhancedMoveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany()
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("EnhancedMoves")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetGenericAdvantage", b =>
                {
                    b.HasOne("domain.Entities.GenericAdvantage", "GenericAdvantage")
                        .WithMany()
                        .HasForeignKey("GenericAdvantageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("GenericAdvantages")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany()
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetItem", b =>
                {
                    b.HasOne("domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("Items")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Items")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetPractice", b =>
                {
                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany()
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Practices")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetPropertyAndRiche", b =>
                {
                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany()
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.PropertyAndRiche", "PropertyAndRiche")
                        .WithMany()
                        .HasForeignKey("PropertyAndRicheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("PropertiesAndRiches")
                        .HasForeignKey("RMXId");
                });

            modelBuilder.Entity("domain.Entities.SheetSkill", b =>
                {
                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("MentalSkills")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Skills")
                        .HasForeignKey("RMXId");

                    b.HasOne("domain.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("domain.Entities.SheetWeapon", b =>
                {
                    b.HasOne("domain.Entities.MS", "MS")
                        .WithMany("Weapons")
                        .HasForeignKey("MSId");

                    b.HasOne("domain.Entities.RMX", "RMX")
                        .WithMany("Weapons")
                        .HasForeignKey("RMXId");

                    b.HasOne("domain.Entities.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("domain.Entities.Table", b =>
                {
                    b.HasOne("domain.Entities.User", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
